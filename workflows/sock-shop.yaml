apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argowf-chaos-
spec:
  entrypoint: argowf-chaos
  serviceAccountName: argo-chaos
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  arguments:
    parameters:
      - name: adminModeNamespace
        value: "litmus"
      - name: appNamespace
        value: "sock-shop"

  templates:
    - name: argowf-chaos
      steps:
        - - name: deploy-sa
            template: deploy-sa
        - - name: install-experiment
            template: install-experiment
        - - name: run-chaos
            template: run-chaos
        - - name: revert-chaos
            template: revert-chaos

    - name: deploy-sa
      inputs:
        artifacts:
          - name: deploy-sa
            path: /tmp/litmus-sa.yaml
            raw:
              data: |
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: pod-cpu-hog-sa
                  labels:
                    name: pod-cpu-hog-sa
                    app.kubernetes.io/part-of: litmus
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: Role
                metadata:
                  name: pod-cpu-hog-sa
                  labels:
                    name: pod-cpu-hog-sa
                    app.kubernetes.io/part-of: litmus
                rules:
                  # Create and monitor the experiment & helper pods
                  - apiGroups: [""]
                    resources: ["pods"]
                    verbs: ["create","delete","get","list","patch","update", "deletecollection"]
                  # Performs CRUD operations on the events inside chaosengine and chaosresult
                  - apiGroups: [""]
                    resources: ["events"]
                    verbs: ["create","get","list","patch","update"]
                  # Fetch configmaps details and mount it to the experiment pod (if specified)
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["get","list",]
                  # Track and get the runner, experiment, and helper pods log 
                  - apiGroups: [""]
                    resources: ["pods/log"]
                    verbs: ["get","list","watch"]  
                  # for creating and managing to execute comands inside target container
                  - apiGroups: [""]
                    resources: ["pods/exec"]
                    verbs: ["get","list","create"]
                  # deriving the parent/owner details of the pod(if parent is anyof {deployment, statefulset, daemonsets})
                  - apiGroups: ["apps"]
                    resources: ["deployments","statefulsets","replicasets", "daemonsets"]
                    verbs: ["list","get"]
                  # deriving the parent/owner details of the pod(if parent is deploymentConfig)  
                  - apiGroups: ["apps.openshift.io"]
                    resources: ["deploymentconfigs"]
                    verbs: ["list","get"]
                  # deriving the parent/owner details of the pod(if parent is deploymentConfig)
                  - apiGroups: [""]
                    resources: ["replicationcontrollers"]
                    verbs: ["get","list"]
                  # deriving the parent/owner details of the pod(if parent is argo-rollouts)
                  - apiGroups: ["argoproj.io"]
                    resources: ["rollouts"]
                    verbs: ["list","get"]
                  # for configuring and monitor the experiment job by the chaos-runner pod
                  - apiGroups: ["batch"]
                    resources: ["jobs"]
                    verbs: ["create","list","get","delete","deletecollection"]
                  # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow
                  - apiGroups: ["litmuschaos.io"]
                    resources: ["chaosengines","chaosexperiments","chaosresults"]
                    verbs: ["create","list","get","patch","update","delete"]
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: pod-cpu-hog-sa
                  labels:
                    name: pod-cpu-hog-sa
                    app.kubernetes.io/part-of: litmus
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: Role
                  name: pod-cpu-hog-sa
                subjects:
                - kind: ServiceAccount
                  name: pod-cpu-hog-sa
                  namespace: sock-shop
      container:
        image: litmuschaos/k8s:latest
        command: [sh, -c]
        args:
          [
            "kubectl apply -f /tmp/litmus-sa.yaml -n {{workflow.parameters.appNamespace}}",
          ]


    - name: install-experiment
      inputs:
        artifacts:
          - name: install-experiment
            path: /tmp/pod-cpu-hog.yaml
            raw:
              data: |
                apiVersion: litmuschaos.io/v1alpha1
                description:
                  message: |
                    Injects cpu consumption on pods belonging to an app deployment
                kind: ChaosExperiment
                metadata:
                  name: pod-cpu-hog
                spec:
                  definition:
                    scope: Namespaced
                    permissions:
                      - apiGroups:
                          - ""
                          - "batch"
                          - "litmuschaos.io"
                        resources:
                          - "jobs"
                          - "pods"
                          - "pods/log"
                          - "events"
                          - "chaosengines"
                          - "chaosexperiments"
                          - "chaosresults"
                        verbs:
                          - "create"
                          - "list"
                          - "get"
                          - "patch"
                          - "update"
                          - "delete"
                    image: "litmuschaos/go-runner:latest"
                    imagePullPolicy: Always
                    args:
                    - -c
                    - ./experiments -name pod-cpu-hog
                    command:
                    - /bin/bash
                    env:
                    - name: TOTAL_CHAOS_DURATION
                      value: '30'
                    
                    - name: CHAOS_INTERVAL
                      value: '10'

                    ## Number of CPU cores to stress
                    - name: CPU_CORES
                      value: '1'

                    ## Percentage of total pods to target
                    - name: PODS_AFFECTED_PERC
                      value: ''

                    ## Period to wait before and after injection of chaos in sec
                    - name: RAMP_TIME
                      value: ''

                    - name: LIB
                      value: 'litmus'

                    - name: TARGET_POD
                      value: ''
                      
                    labels:
                      name: pod-cpu-hog
      container:
        image: litmuschaos/k8s:latest
        command: [sh, -c]
        args:
          [
            "kubectl apply -f /tmp/pod-cpu-hog.yaml -n {{workflow.parameters.appNamespace}}",
          ]

    - name: run-chaos
      inputs:
        artifacts:
          - name: run-chaos
            path: /tmp/chaosengine.yaml
            raw:
              data: |
                apiVersion: litmuschaos.io/v1alpha1
                kind: ChaosEngine
                metadata:
                  name: pod-cpu-hog-chaos
                  namespace: {{workflow.parameters.appNamespace}}
                spec:
                  appinfo:
                    appns: {{workflow.parameters.appNamespace}}
                    applabel: name=carts
                    appkind: daemonset
                  jobCleanUpPolicy: retain
                  engineState: 'active'
                  chaosServiceAccount: pod-cpu-hog-sa
                  experiments:
                    - name: pod-cpu-hog
                      spec:
                        components:
                          env:
                            - name: CPU_CORES
                              value: '1'

                            ## provide the cluster runtime
                            - name: CONTAINER_RUNTIME
                              value: 'containerd'        

                            # provide the socket file path
                            - name: SOCKET_PATH
                              value: '/var/run/containerd/containerd.sock'

                            - name: TOTAL_CHAOS_DURATION
                              value: '60' # in seconds

                            - name: CHAOS_KILL_COMMAND
                              value: "kill -9 $(ps afx | grep \"[md5sum] /dev/zero\" | awk '{print$1}' | tr '\n' ' ')"
      container:
        image: litmuschaos/litmus-checker:latest
        args: ["-file=/tmp/chaosengine.yaml","-saveName=/tmp/engine-name"]

    - name: revert-chaos
      container:
        image: litmuschaos/k8s:latest
        command: [sh, -c]
        args:
          [
            "kubectl delete chaosengine pod-cpu-hog-chaos -n {{workflow.parameters.appNamespace}}",
          ]
